# Adapted from https://github.com/thodan/bop_toolkit/blob/master/scripts/calc_gt_info.py

"""Calculates visibility, 2D bounding boxes etc. for the ground-truth poses.

The info is saved in folder "{train,val,test}_gt_info" in the main folder of the
selected dataset.
"""

import os
import json
from pathlib import Path
import argparse

from cad2cosypose import read_config_file
from cad2cosypose.custom_bop_toolkit_lib.calc_gt_info import compute_gt_info
from bop_toolkit_lib import config

# Import env variables
cfg = read_config_file()

parser = argparse.ArgumentParser()
parser.add_argument('--rendered-batch-path', dest='rendered_batch_path', type=str,
                    default=Path(cfg["output_dir"]),
                    help="Path to where the batch of images was generated by BlenderProc")
parser.add_argument('--dataset-split', dest="dataset_split", type=str, default="train",
                    help="Dataset split. Options: 'train', 'val', 'test'.")
parser.add_argument('--dataset-split-type', dest="dataset_split_type", type=str, default='pbr',
                    help="Dataset split type.")
parser.add_argument('--dataset-name', dest='dataset_name', type=str,
                    default=cfg["dataset_name"],
                    help="Name of the dataset generated by BlenderProc")
args = parser.parse_args()


# PARAMETERS.
################################################################################
with open(Path(args.rendered_batch_path) / args.dataset_name / "categories.json") as json_file:
    categories_dict = json.load(json_file)

NB_OBJ_DATASET = len(categories_dict.keys())
SYMMETRIC_OBJ_IDS = list(range(1, 1 + NB_OBJ_DATASET))

p = {
    # See dataset_params.py for options.
    'dataset': args.dataset_name,

    # Dataset split. Options: 'train', 'val', 'test'.
    'dataset_split': args.dataset_split,

    # Dataset split type. None = default. See dataset_params.py for options.
    'dataset_split_type': args.dataset_split_type,

    # Folder containing the BOP datasets.
    'datasets_path': args.rendered_batch_path,

    # IDs of objects with symmetries
    'symmetric_obj_ids': SYMMETRIC_OBJ_IDS,

    # Number of objects in the dataset
    'nb_obj_dataset': NB_OBJ_DATASET,

    # Categories generated by BlenderProc
    'categories_dict': categories_dict,

    # ----- Other parameters, which should remain the same -----
    # Whether to save visualizations of visibility masks.
    'vis_visibility_masks': False,

    # Tolerance used in the visibility test [mm].
    'delta': 15,

    # Type of the renderer.
    'renderer_type': 'vispy',  # Options: 'vispy', 'cpp', 'python'.

    # Path template for output images with object masks.
    'vis_mask_visib_tpath': os.path.join(
        config.output_path, 'vis_gt_visib_delta={delta}',
        'vis_gt_visib_delta={delta}', '{dataset}', '{split}', '{scene_id:06d}',
        '{im_id:06d}_{gt_id:06d}.jpg'),
}
################################################################################


if __name__ == '__main__':
    compute_gt_info(p)
