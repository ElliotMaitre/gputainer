# Adapted from https://github.com/thodan/bop_toolkit/blob/master/scripts/calc_model_info.py

"""Calculates the 3D bounding box and the diameter of 3D object models."""
import os
import json
from pathlib import Path
import argparse

from cad2cosypose.custom_bop_toolkit_lib import dataset_params
from cad2cosypose.custom_bop_toolkit_lib import inout as custom_inout
from bop_toolkit_lib import inout
from bop_toolkit_lib import misc

from cad2cosypose import read_config_file

# Import env variables
cfg = read_config_file()

parser = argparse.ArgumentParser()
parser.add_argument('--rendered-batch-path', dest='rendered_batch_path', type=str,
                    default=Path(cfg["output_dir"]),
                    help="Path to where the batch of images was generated by BlenderProc")
parser.add_argument('--dataset-name', dest='dataset_name', type=str,
                    default=cfg["output_dir"],
                    help="Name of the dataset generated by BlenderProc")
args = parser.parse_args()

rendered_batch_path = Path(args.rendered_batch_path)

# PARAMETERS.
################################################################################
with open(rendered_batch_path / args.dataset_name / "categories.json") as json_file:
    categories_dict = json.load(json_file)

NB_OBJ_DATASET = len(categories_dict.keys())
SYMMETRIC_OBJ_IDS = list(range(1, 1 + NB_OBJ_DATASET))
SYMMETRIES = {obj-1: ("symmetries_continuous", [
    {"axis": [0, 0, 1], "offset": [0, 0, 0]}]) for obj in SYMMETRIC_OBJ_IDS}

p = {
    # See dataset_params.py for options.
    'dataset': args.dataset_name,

    # Type of input object models.
    'model_type': None,

    # Folder containing the BOP datasets.
    'datasets_path': rendered_batch_path,

    # IDs of objects with symmetries
    'symmetric_obj_ids': SYMMETRIC_OBJ_IDS,

    # Manually define symmetries of objects
    'symmetries_dict': SYMMETRIES,

    # Number of objects in the dataset
    'nb_obj_dataset': NB_OBJ_DATASET,

    # Categories generated by BlenderProc
    'categories_dict': categories_dict,
}
################################################################################


# Load dataset parameters.
dp_model = dataset_params.get_model_params(
    p['datasets_path'], p['dataset'], p['model_type'],
    custom_nb_objects=p['nb_obj_dataset'],
    custom_symmetric_obj_ids=p['symmetric_obj_ids'],
)

objid_to_objfile_dict = {v: key for key, v in p['categories_dict'].items()}

models_info = {}
for obj_id in dp_model['obj_ids']:
    misc.log('Processing model of object {}...'.format(obj_id))

    model_tpath = objid_to_objfile_dict[obj_id].replace('.obj', '.ply')
    model = custom_inout.load_ply(model_tpath)

    # Calculate 3D bounding box.
    ref_pt = list(map(float, model['pts'].min(axis=0).flatten()))
    size = list(map(float, (model['pts'].max(axis=0) - ref_pt).flatten()))

    # Calculated diameter.
    diameter = misc.calc_pts_diameter(model['pts'])

    models_info[obj_id] = {
        'min_x': ref_pt[0], 'min_y': ref_pt[1], 'min_z': ref_pt[2],
        'size_x': size[0], 'size_y': size[1], 'size_z': size[2],
        'diameter': diameter
    }

# Add the symmetries
for obj_id, (symmetry_type, symmetry_info) in p['symmetries_dict'].items():
    models_info[obj_id][symmetry_type] = symmetry_info

# Save the calculated info about the object models.
os.makedirs(Path(dp_model['models_info_path']).parent, exist_ok=True)
inout.save_json(dp_model['models_info_path'], models_info)
