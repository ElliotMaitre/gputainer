#!/bin/bash

if [ -z "${APPTAINER_ENVIRONMENT}" ]; then
    echo "This script cannot be run directly and must be started by the application container"
    exit 1
fi

. /pyenv/conda/etc/profile.d/conda.sh
conda activate /pyenv/app

# pybullet wants EGL_VISIBLE_DEVICES
export EGL_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES%%,*}    # example: 2,3,4 => 2

# cuda debugging
#export CUDA_LAUNCH_BLOCKING=1

echo inside apptainer DISPLAY=${DISPLAY}
echo CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES}
echo EGL_VISIBLE_DEVICES=${EGL_VISIBLE_DEVICES}
ls -alr /dev/dri

icewm & wm=$!

# show cuda is running
python -c 'import torch;print("torch.__version__=", torch.__version__, "\ntorch.cuda.device_count()=", torch.cuda.device_count(), "\ntorch.cuda.is_available()=", torch.cuda.is_available(), "\ntorch.version.cuda=", torch.version.cuda, "\ntorch.backends.cudnn.version()=", torch.backends.cudnn.version());'

if true; then
    cd cosypose
    # building but not installing because apptainer filesystem might be not writable
    [ -d build ] || python setup.py build
    (cd deps/bullet3; [ -d build ] || python setup.py build)
    (cd deps/job-runner; [ -d build ] || python setup.py build)
    (cd ../ros_cosypose; rm -rf build; python setup.py build)
    # path is necessary
    pylib=$(cd build; ls | grep ^lib | head -1)
    export PYTHONPATH=$(pwd)/build/${pylib}:$(pwd)/deps/bullet3/build/${pylib}:$(pwd)/deps/job-runner/build/${pylib}:${PYTHONPATH}
    export LD_LIBRARY_PATH=$(pwd)/build/${pylib}:$(pwd)/deps/bullet3/build/${pylib}:$(pwd)/deps/job-runner/build/${pylib}:${LD_LIBRARY_PATH}
    cd ..
else
    # cosypose is not integrated into apptainer image to allow for development
    (cd cosypose; [ -d build ] || python setup.py install)
    (cd cosypose/deps/bullet3; [ -d build ] || python setup.py install)
    (cd cosypose/deps/job-runner; [ -d build ] || python setup.py install)
    (cd ros_cosypose; [ -d build ] || python setup.py install)
fi

(
    cd ros_cosypose
    catkin clean -b -y || true
    catkin build
)

source ros_cosypose/devel/setup.bash
export ROS_PACKAGE_PATH=${ROS_PACKAGE_PATH}:$(pwd)/ros_cosypose
export PATH=$(pwd)/ros_cosypose/scripts:${PATH}

roslaunch ros_cosypose/launch/singleview_loop.launch debug:=true bringup_camera:=true || true

ret=$?
kill -9 $wm
(exit $ret)
