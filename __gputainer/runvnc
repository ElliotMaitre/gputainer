#!/bin/bash

# this script can run an apptainer sif file of the same name
scriptname=${0##*/}
basename=${scriptname%.*}
if [ -r ${basename}.sif ]; then
    SIF="${basename}.sif"
    APPTAINEROPTS=""
fi

# .. or should be symlinked from a "gputainer" application directory
[ -d ../__gputainer ] || cd ${0%/*}

# !!!!! properly configure VirtualGL !!!!!
# DOC: # https://rawcdn.githack.com/VirtualGL/virtualgl/3.0/doc/index.html#hd006

if [ -z "${CUDA_VISIBLE_DEVICES}" ]; then
    # SLURM is supposed to set this
    # so we are started by hand
    echo "===============================" 1>&2
    echo "CUDA_VISIBLE_DEVICES IS NOT SET" 1>&2
    echo "finding one for testing"         1>&2
    echo "===============================" 1>&2
    for card in /dev/dri/card*; do
        if /opt/VirtualGL/bin/eglinfo ${card} | grep vendor.*NVIDIA; then
            export CUDA_VISIBLE_DEVICES=$(echo ${card} | sed 's/.*\(.\)$/\1/')
            dri=${card}
            break
        fi
    done
fi
if [ -z "${dri}" ]; then
    first_cuda=${CUDA_VISIBLE_DEVICES%%,*}   # 2,3,4,5 => 2
    dri=/dev/dri/card${first_cuda}
fi
if [ ! -r "$dri" ]; then
    echo "device '${dri}' is not accessible  ?" 1>&2
    exit 1
fi
echo "CUDA_VISIBLE_DEVICES is set to '${CUDA_VISIBLE_DEVICES}'" 1>&2
echo "DRI card is '${dri}'" 1>&2

vgl_options="-d ${dri}"

# account's HOME might not be accessible, but it must exist
[ -d ${HOME} ] || export HOME=$(pwd)/.temphome-$(whoami)

mkdir -p ${HOME}/.vnc

id=deleteme-${SLURM_JOBID-$$}
password1=$$
password2=view  # view-only password
passwordfile=${HOME}/.vnc/vnctmp-passwd-${id}
startup=${HOME}/.vnc/vnctmp-vncstartup-${id}
logvnc=${HOME}/.vnc/vnctmp-vnclog-${id}.txt
logapp=${PWD}/log-stdout-${id}.txt
fakehomescript=${HOME}/.vnc/vnctmp-vncstartup2-${id}
runscript=${HOME}/.vnc/vnctmp-vncstartup3-${id}

if [ -z "${SIF}" ]; then
    dir=${PWD}/generated/${PWD##*/}.sifdir
    if [ -d "${dir}" ]; then
        SIF=${dir}
        APPTAINEROPTS="--writable --bind ${PWD}/generated/PYTHAINER:/pyenv"
    else
        echo "error: cannot find directory '${dir}'" 1>&2
        SIF="unknown-SIF-location"
    fi
fi

rm -f ${HOME}/.vnc/vnctmp* ${logvnc} ${logapp} ${logstderr} ${passwordfile} ${startup}

############################################################
touch ${fakehomescript}
chmod +x ${fakehomescript}
cat > ${fakehomescript} << EOF
#!/bin/bash

# \$HOME can be an artificial place, and
# - it is not kept up through apptainer
# - it is forbidden to set it up via APPTAINERENV_HOME
# so it is transmitted through APPTAINERENV_MYHOME:
if [ -z "\${MYHOME}" ]; then
    echo "\\$MYHOME (from APPTAINERENV_MYHOME) should be set!"
else
    export HOME=\${MYHOME}
fi
[ -z "\${MYPWD}" ] || cd \${MYPWD}

"\$@"
EOF
############################################################
touch ${runscript}
chmod +x ${runscript}
cat > ${runscript} << EOF
#!/bin/bash -e

if [ -z "\${1}" ]; then
    run=\$(pwd)/run-in-container
else
    run="\${@}"
fi

APPDIR=\${PWD}/generated
APPNAME=\${PWD##*/}

echo APPDIR=\${APPDIR}
echo APPNAME=\${APPNAME}

# passing CUDA_VISIBLE_DEVICES
# set it to 0 (arbitrary) if not currently set
export APPTAINERENV_CUDA_VISIBLE_DEVICES=\${CUDA_VISIBLE_DEVICES-0}

if true; then
    # map /tmp from sub-tmp with linked X11 socket
    tmp=/tmp/apptainer-tmp-\$(date +%y-%m-%d-%H-%M-%S)
    mkdir -p \${tmp}/.X11-unix
    ln /tmp/.X11-unix/* \${tmp}/.X11-unix/
else
    # share /tmp and X11 socket
    tmp=/tmp
fi

echo "DRI on host:"
ls -alr /dev/dri
echo "DISPLAY on host: '\${DISPLAY}'"

export APPTAINERENV_MYHOME=\${HOME}
export APPTAINERENV_MYPWD=\${PWD}
time apptainer exec --nv ${APPTAINEROPTS} --bind \$(pwd):/hostpwd --bind /net:/net --bind /local:/local --bind \${tmp}:/tmp ${SIF} ${fakehomescript} \${run}
EOF
############################################################

echo "cd $(pwd); vglrun ${vgl_options} xterm -geometry 160x60 -e bash -c '${runscript} \"${@}\" 2>&1 | tee ${logapp}'" > ${startup}
chmod +x ${startup}

touch ${passwordfile}
chmod go-rwx ${passwordfile}
( echo ${password1}; echo ${password2}; ) | /opt/TurboVNC/bin/vncpasswd -f >> ${passwordfile}

/opt/TurboVNC/bin/vncserver -vgl -log ${logvnc} -rfbauth ${passwordfile} -xstartup ${startup}

waitcounter=10
while [ ! -r ${logvnc} ]; do
    waitcounter=$((waitcounter - 1))
    if [ ${waitcounter} -eq 0 ]; then
        echo "Could not start vnc server?" 1>&2
        exit 1
    fi
    echo "waiting for ${logvnc} (${waitcounter})"
    sleep 1
done

echo -e "========== LOGFILE: \n${logapp}\n"
tail -f ${logvnc} | sed -ne "s,.*TurboVNC:.*(\([^)]*\))$,========== RUN  IT NOW ($(date)):\n/opt/TurboVNC/bin/vncviewer -password ${password1} -noreconnect -nonewconn -scale auto \1\n\n========== VIEW IT NOW ($(date)):\n/opt/TurboVNC/bin/vncviewer -password ${password2} -noreconnect -nonewconn -scale auto \1\n,p" & shower=$!

tail -f ${logvnc} | sed -ne "/Killing Xvnc process ID/q"
echo -e "==========\n"

#cat ${logvnc}

kill ${shower}
